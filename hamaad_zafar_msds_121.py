# -*- coding: utf-8 -*-
"""HAMAAD_ZAFAR_MSDS_121.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xoAbjiTa3YAtjXLQRzQb1gD4fB9QND6p
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
from sklearn.ensemble import RandomForestClassifier

# Set the style for plots
sns.set(style="whitegrid")

from google.colab import files
uploaded = files.upload()

train_data = pd.read_csv('train.csv')
test_data = pd.read_csv('test.csv')

train_data.head(7)

train_data.info()

train_data.describe()

train_data.isnull().sum()

train_data.shape

train_data.columns

train_data.dtypes

train_data.nunique()

test_data.head()

test_data.info()

test_data.describe()

test_data.isnull().sum()

test_data.shape

test_data.columns

test_data.dtypes

test_data.nunique()

test_data.tail(3)

train_data['Age'].fillna(train_data['Age'].median(), inplace=True)
test_data['Age'].fillna(test_data['Age'].median(), inplace=True)

test_data.isnull().sum()

train_data.isnull().sum()

train_data['Embarked'].fillna(train_data['Embarked'].mode()[0], inplace=True)

test_data['Fare'].fillna(test_data['Fare'].median(), inplace=True)

train_data.drop(columns=['Cabin'], inplace=True)
test_data.drop(columns=['Cabin'], inplace=True)

test_data.isnull().sum()

train_data.isnull().sum()

plt.figure(figsize=(6, 4))
sns.countplot(data=train_data, x='Survived', palette='pastel')
plt.title("Survival Distribution")
plt.xlabel("Survived (0 = No, 1 = Yes)")
plt.ylabel("Count")
plt.show()

plt.figure(figsize=(6, 4))
sns.countplot(data=train_data, x='Survived', hue='Sex', palette='cool')
plt.title("Survival by Gender")
plt.xlabel("Survived (0 = No, 1 = Yes)")
plt.ylabel("Count")
plt.legend(title="Gender")
plt.show()

plt.figure(figsize=(6, 4))
sns.countplot(data=train_data, x='Survived', hue='Pclass', palette='Set2')
plt.title("Survival by Passenger Class")
plt.xlabel("Survived (0 = No, 1 = Yes)")
plt.ylabel("Count")
plt.legend(title="Passenger Class")
plt.show()

plt.figure(figsize=(8, 5))
sns.histplot(data=train_data, x='Age', hue='Survived', kde=True, palette='muted', bins=30)
plt.title("Age Distribution by Survival")
plt.xlabel("Age")
plt.ylabel("Density")
plt.show()

plt.figure(figsize=(6, 4))
sns.countplot(data=train_data, x='Embarked', hue='Survived', palette='cubehelix')
plt.title("Survival by Embarkation Point")
plt.xlabel("Embarkation Point")
plt.ylabel("Count")
plt.legend(title="Survived")
plt.show()

# Create FamilySize feature
train_data['FamilySize'] = train_data['SibSp'] + train_data['Parch'] + 1
test_data['FamilySize'] = test_data['SibSp'] + test_data['Parch'] + 1

# Display the new feature
print(train_data[['SibSp', 'Parch', 'FamilySize']].head())

# Encode 'Sex' feature
train_data['Sex'] = train_data['Sex'].map({'male': 0, 'female': 1})
test_data['Sex'] = test_data['Sex'].map({'male': 0, 'female': 1})

# Encode 'Embarked' feature
train_data['Embarked'] = train_data['Embarked'].map({'C': 0, 'Q': 1, 'S': 2})
test_data['Embarked'] = test_data['Embarked'].map({'C': 0, 'Q': 1, 'S': 2})

# Verify the changes
print(train_data[['Sex', 'Embarked']].head())

from sklearn.preprocessing import StandardScaler

# Initialize the scaler
scaler = StandardScaler()

# Scale selected features
train_data[['Age', 'Fare', 'FamilySize']] = scaler.fit_transform(train_data[['Age', 'Fare', 'FamilySize']])
test_data[['Age', 'Fare', 'FamilySize']] = scaler.transform(test_data[['Age', 'Fare', 'FamilySize']])

# Check the scaled values
print(train_data[['Age', 'Fare', 'FamilySize']].head())

X = train_data[['Pclass', 'Sex', 'Age', 'Fare', 'FamilySize', 'Embarked']]
y = train_data['Survived']

X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)

model = LogisticRegression(max_iter=1000)
model.fit(X_train, y_train)

y_pred = model.predict(X_val)

accuracy = accuracy_score(y_val, y_pred)
conf_matrix = confusion_matrix(y_val, y_pred)
class_report = classification_report(y_val, y_pred)

print(f"Accuracy: {accuracy:.4f}")

print("Confusion Matrix:")

print(conf_matrix)

print("Classification Report:")
print(class_report)

rf_model = RandomForestClassifier(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)

y_pred_rf = rf_model.predict(X_val)

accuracy_rf = accuracy_score(y_val, y_pred_rf)
conf_matrix_rf = confusion_matrix(y_val, y_pred_rf)
class_report_rf = classification_report(y_val, y_pred_rf)

print(f"Random Forest Accuracy: {accuracy_rf:.4f}")

print("Random Forest Confusion Matrix:")
print(conf_matrix_rf)

print("Random Forest Classification Report:")
print(class_report_rf)

X_test = test_data[['Pclass', 'Sex', 'Age', 'Fare', 'FamilySize', 'Embarked']]
test_predictions = model.predict(X_test)

test_data['Survived'] = test_predictions
test_data[['PassengerId', 'Survived']].to_csv('titanic_predictions.csv', index=False)